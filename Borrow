using System;
using System.Linq;
using System.Web.Mvc;
using MyLibrary.Models;
using System.Data.Entity;
using System.Net;
using MyLibrary.ADClasses;

namespace MyLibrary.Controllers
{
    public class BorrowBookController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();
        UserInfo user = new UserInfo();

        public ActionResult MyBorrowedBooks()
        {
            return View(db.Barrows.OrderBy(p => p.BorrowedBookId).Distinct().ToList());
        }


        // This action handles the return of a borrowed book
        [HttpPost]
        public ActionResult ReturnBook(int BorrowedBookId)
        {

            // Find the borrowed book by its unique ID
            var borrowedBook = db.Barrows.Find(BorrowedBookId);

            // Check if the borrowed book exists and has not been validated for return, and has a return date set
            if (borrowedBook != null && !borrowedBook.IsValidated && borrowedBook.ReturnDate.HasValue)
            {
                borrowedBook.IsReturned = true;
                borrowedBook.ReturnDate = DateTime.Now;
                db.SaveChanges();

                var bookAvailable = db.BooksAvailables.FirstOrDefault(b => b.Isbn13 == borrowedBook.BookISBN);

                if (bookAvailable != null)
                {
                    bookAvailable.QtyAvailable++;

                }
                db.SaveChanges();   
                
                TempData["SuccesMessage"] = "Succes!";
                return RedirectToAction("MyBorrowedBooks");


            }
            else
            {
                
                TempData["ErrorMessage"] = "Error!";
                return RedirectToAction("MyBorrowedBooks");

            }


        }




        // This action handles the validation of a book return
        public ActionResult ValidateReturn(int BorrowedBookId)
        {
            // Find the borrowed book by its ID and mark it as validated
            var borrowedBook = db.Barrows.Find(BorrowedBookId);
            if (borrowedBook != null)
            {
                borrowedBook.IsValidated = true;
                db.SaveChanges();
            }
            return RedirectToAction("MyBorrowedBooks");
        }

        [HttpGet]
        // This action displays the borrowing form
        public ActionResult Borrow()
        {
            // Display error or success messages, if any
            ViewBag.ErrorMessage = TempData["ErrorMessage"];
            ViewBag.SuccessMessage = TempData["SuccessMessage"];
            return View();
        }

      

        public ActionResult Borrow(string isbn13)
        {
            // Find the book by ISBN-13
            var book = db.BooksAvailables.FirstOrDefault(b => b.Isbn13 == isbn13);

            if (user.isLoggedIn()) // Check if the user is logged in
            {
                string currentUserId = getUserName();

                if (book.QtyAvailable > 0)
                {
                    book.QtyAvailable--;

                    Barrow borrowedBook = new Barrow
                    {
                        UserId = currentUserId,
                        BookName = book.BookName,
                        BookISBN = book.Isbn13,
                        BorrowDate = DateTime.Now,
                        ReturnDate = DateTime.Now.AddDays(14)
                    };

                    db.Barrows.Add(borrowedBook);
                    db.SaveChanges();

                    var response = new
                    {
                        Success = true,
                        Message = "The book has been borrowed successfully"
                    };
                    return Json(response);
                }
                else
                {
                    var response = new
                    {
                        Success = false,
                        Message = "Error"
                    };
                    return Json(response);
                }
            }
            else
            {
                return RedirectToAction("LoginPage", "Account");
            }

        }

        public string getUserName()
        {
            UserInfo user = new UserInfo();
            return user.getUsername();
        }
    }
}


@model List<MyLibrary.Models.Barrow>

@{
    ViewBag.Title = "My Borrowed Books";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2 class="text-center">My Borrowed Books</h2>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


<style>
    .table {
        text-align: center;
        margin: 0 auto;
    }

    .table th{
        background-color:#333;
        color:#fff;
    }

    .modal-title{
        text-align:center;
    }

    .modal-body{
        text-align:center;
    }

    .modal-footer {
        justify-content: center;
    }
</style>

@if (!string.IsNullOrEmpty(TempData["SuccessMessage"] as string))
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

@if (!string.IsNullOrEmpty(TempData["ErrorMessage"] as string))
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>UserName</th>
            <th>BookName</th>
            <th>ISBN</th>
            <th>BorrowDate</th>
            <th>ReturnDate</th>
            <th>Actions</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in Model)
        {
            <tr>
                <td>@book.BorrowedBookId</td>
                <td>@book.UserId</td>
                <td>@book.BookName</td>
                <td>@book.BookISBN</td>
                <td>@book.BorrowDate</td>
                <td>@book.ReturnDate</td>
                <td>
                    @if (book.IsReturned == true)
                    {
                        <text>Returned</text>
                    }
                    else
                    {
                        <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#returnModal-@book.BorrowedBookId">Return Book</button>

                        <div class="modal fade" id="returnModal-@book.BorrowedBookId" tabindex="-1" role="dialog" aria-labelledby="returnModalLabel-@book.BorrowedBookId" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="returnModalLabel-@book.BorrowedBookId">Confirmation Return Book</h5>
                                    </div>
                                    <div class="modal-body">
                                        Are you sure you want to return this book?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">No</button>
                                        @*<a href="@Url.Action("MyBorrowedBooks", "BorrowBook", new { BorrowedBookId = book.BorrowedBookId })" class="btn btn-primary">Yes</a>*@
                                        @using (Html.BeginForm("ReturnBook", "BorrowBook", new { BorrowedBookId = book.BorrowedBookId }, FormMethod.Post))
                                        {
                                            <button type="submit" class="btn btn-warning">YES</button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

