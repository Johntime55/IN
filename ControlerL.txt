using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using MyLibrary.Models;


namespace MyLibrary.Controllers
{
    public class LibrariesController : Controller
    {
        private I_CoposEntities db = new I_CoposEntities();

        // GET: Libraries
        public ActionResult Index()
        {
            return View(db.Libraries.OrderBy(p => p.Author).Distinct().ToList());
        }

       

        // GET: Libraries/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Libraries/Create
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        // POST: Libraries/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
     
        public ActionResult Create([Bind(Include = "id,BookName,Author,Isbn13,Isbn10,Publisher,YearPublished,CoverImage,QtyAvailable")] Library library)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    db.Libraries.Add(library);
                    db.SaveChanges();

                    BooksAvailable bookAvailable = new BooksAvailable
                    {
                        id = library.id,
                        BookName = library.BookName,
                        Author = library.Author,
                        Isbn13 = library.Isbn13,
                        Isbn10 = library.Isbn10,
                        Publisher = library.Publisher,
                        YearPublished = library.YearPublished,
                        CoverImage = library.CoverImage,
                        QtyAvailable = library.QtyAvailable
                    };
                    db.BooksAvailables.Add(bookAvailable);
                    db.SaveChanges();

                    // Returnați un răspuns JSON care indică succesul
                    return Json(new { success = true, message = "The series for this book has been created successfully!" });
                }
                catch (Exception ex)
                {
                    // În caz de eroare, returnați un răspuns JSON care indică eroarea
                    return Json(new { success = false, message = "An error occurred while creating the book: " + ex.Message });
                }
            }
            else
            {
                // Dacă ModelState nu este valid, returnați un răspuns JSON care indică eroarea
                return Json(new { success = false, message = "Validation failed. The book could not be created." });
            }
        }



        // GET: Libraries/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Library library = db.Libraries.Find(id);
            if (library == null)
            {
                return HttpNotFound();
            }
            return View(library);
        }

        // POST: Libraries/Edit/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for 
        // more details see https://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "id,BookName,Author,Isbn13,Isbn10,Publisher,YearPublished,CoverImage,QtyAvailable")] Library library)
        {
            if (ModelState.IsValid)
            {
                db.Entry(library).State = EntityState.Modified;
                db.SaveChanges();
                //Actualizm detaliile in tabela BooksAvailables
                var bookAvailable = db.BooksAvailables.FirstOrDefault(b => b.BookName == library.BookName);
                if (bookAvailable != null)
                {
                    bookAvailable.QtyAvailable =library.QtyAvailable;
                    db.SaveChanges();
                }

                return Json(new { success = true, message = "Book updated successfully", book = library });
            }
            return Json(new { success = false, message = "Validation failed" });
        }



        // GET: Libraries/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Library library = db.Libraries.Find(id);
            if (library == null)
            {
                return HttpNotFound();
            }
            return View(library);
        }


        // POST: Libraries/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            //We check if the book is borrowed in Borrow
            bool isBookBorrowed = db.Barrows.Any(b => b.BorrowedBookId == id);
            //Check if the book is in the waiting list
            bool isBookInWaitlist = db.Waitlists.Any(w => w.WaitlistId == id);

            if (isBookBorrowed)
            {
                return Json(new { success = false, message = "The book is borrowed, you cannot delete it!" });
            }
            else if (isBookInWaitlist)
            {
                return Json(new { success = false, message = "The book is in the waiting list, you cannot delete it!" });
            }
            else
            {
           
                Library library = db.Libraries.Find(id);
                if (library == null)
                {
                    return Json(new { success = false, message = "Book not found." });
                }

              
                db.Libraries.Remove(library);

                // Look for the book in the BooksAvailables table and delete it if it exists
                BooksAvailable bookAvailable = db.BooksAvailables.FirstOrDefault(ba => ba.id == id);
                if (bookAvailable != null)
                {
                    db.BooksAvailables.Remove(bookAvailable);
                }

                db.SaveChanges();

                return Json(new { success = true, message = "The book was successfully deleted." });
            }

        }

       

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
